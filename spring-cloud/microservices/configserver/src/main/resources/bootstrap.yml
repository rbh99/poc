# bootstrap.yml on the other hand is specific to spring-cloud-config and is loaded before the application.yml
# bootstrap.yml is only needed if you are using Spring Cloud and your microservice configuration is stored on a remote Spring Cloud Config Server.

# 1  When used with Spring Cloud Config server, you shall specify the application-name and config git location using below properties.
#       spring.application.name: "application-name"
#       spring.cloud.config.server.git.uri: "git-uri-config"

# 2  When used with microservices (other than cloud config server), we need to specify the application name and location of config server using below properties
#       spring.application.name: 
#       spring.cloud.config.uri: 

# 3    This properties file can contain other configuration relevant to Spring Cloud environment for e.g. eureka server location, encryption/decryption related properties.

# Note: Upon startup, Spring Cloud makes an HTTP(S) call to the Spring Cloud Config Server with the name of the application and retrieves back that applicationâ€™s configuration.
# application.yml contains the default configuration for the microservice and any configuration retrieved (from cloud config server) during the bootstrap process will override configuration defined in application.yml

# spring.config.name=configserver the app will run on port 8888 and serve data from a sample repository.

spring:
  config:
    name: configserver

  application:
    name: configserver
    
  profiles:
    active:
    - native
  cloud:
    config:
      server:
        native: 
          search-locations: 
             - classpath:config/


# encrypt:
#  failOnError: false
#  keyStore:
#    location: classpath:keystore.jks
#    password: ${KEYSTORE_PASSWORD:foobar} # don't use a default in production
#    alias: test


