# bootstrap.yml on the other hand is specific to spring-cloud-config and is loaded before the application.yml
# bootstrap.yml is only needed if you are using Spring Cloud and your microservice configuration is stored on a remote Spring Cloud Config Server.

# 1  When used with Spring Cloud Config server, you shall specify the application-name and config git location using below properties.
#       spring.application.name: "application-name"
#       spring.cloud.config.server.git.uri: "git-uri-config"

# 2  When used with microservices (other than cloud config server), we need to specify the application name and location of config server using below properties
#       spring.application.name: 
#       spring.cloud.config.uri: 

# 3    This properties file can contain other configuration relevant to Spring Cloud environment for e.g. eureka server location, encryption/decryption related properties.

# Note: Upon startup, Spring Cloud makes an HTTP(S) call to the Spring Cloud Config Server with the name of the application and retrieves back that applicationâ€™s configuration.
# application.yml contains the default configuration for the microservice and any configuration retrieved (from cloud config server) during the bootstrap process will override configuration defined in application.yml

spring:
  application:
    name: aservice

  cloud:
    config:
      enabled: true
#     endpoint: http://localhost:8888 
#      label: master
#      discovery:
#        enabled: true
      uri: http://localhost:8888
#      username=root
#      password=s3cr3t

eureka:
  client:
    enabled: true
    service-url:
      defaultZone: http://localhost:8761/eureka/
    healthcheck:
      enabled: true  

